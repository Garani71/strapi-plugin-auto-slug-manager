'use strict';

const slugify = require('slugify');
const settingsStore = require('../utils/settings-store');

module.exports = ({ strapi }) => ({
  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ Rich Text –±–ª–æ–∫–æ–≤ (—Ç–∏–ø "blocks")
   * @param {Array} blocks - –º–∞—Å—Å–∏–≤ –±–ª–æ–∫–æ–≤ Rich Text
   * @returns {string} - –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  extractTextFromBlocks(blocks) {
    console.log('üìù [Auto Slug] –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –±–ª–æ–∫–æ–≤:', JSON.stringify(blocks, null, 2));
    
    if (!blocks || !Array.isArray(blocks)) {
      console.log('‚ùå [Auto Slug] –ë–ª–æ–∫–∏ –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ –º–∞—Å—Å–∏–≤');
      return '';
    }

    let text = '';
    
    for (const block of blocks) {
      if (block.type === 'paragraph' && block.children) {
        for (const child of block.children) {
          if (child.type === 'text' && child.text) {
            text += child.text + ' ';
          }
        }
      }
    }
    
    const result = text.trim();
    console.log('‚úÖ [Auto Slug] –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', result);
    return result;
  },

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ Rich Text (HTML —Å—Ç—Ä–æ–∫–∞)
   * @param {string} htmlContent - HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
   * @returns {string} - –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  extractTextFromHtml(htmlContent) {
    console.log('üìù [Auto Slug] –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ HTML:', htmlContent);
    
    if (!htmlContent || typeof htmlContent !== 'string') {
      console.log('‚ùå [Auto Slug] HTML –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å—Ç—Ä–æ–∫–∞');
      return '';
    }

    // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
    let text = htmlContent
      .replace(/<[^>]*>/g, ' ')  // –£–¥–∞–ª—è–µ–º –≤—Å–µ HTML —Ç–µ–≥–∏
      .replace(/&nbsp;/g, ' ')   // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
      .replace(/&amp;/g, '&')    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∞–º–ø–µ—Ä—Å–∞–Ω–¥—ã
      .replace(/&lt;/g, '<')     // –î–µ–∫–æ–¥–∏—Ä—É–µ–º < 
      .replace(/&gt;/g, '>')     // –î–µ–∫–æ–¥–∏—Ä—É–µ–º >
      .replace(/&quot;/g, '"')   // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏
      .replace(/&#39;/g, "'")    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã
      .replace(/\s+/g, ' ')      // –°—Ö–ª–æ–ø—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
      .trim();                   // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º

    const result = text.trim();
    console.log('‚úÖ [Auto Slug] –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ HTML:', result);
    return result;
  },

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–ª—è (–æ–±—ã—á–Ω–æ–≥–æ –∏–ª–∏ Rich Text)
   * @param {any} fieldValue - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
   * @param {boolean} handleRichText - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ª–∏ Rich Text
   * @returns {string} - —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–≥–∞
   */
  extractTextFromField(fieldValue, handleRichText = true) {
    if (!fieldValue) return '';

    // –ï—Å–ª–∏ —ç—Ç–æ Rich Text –±–ª–æ–∫–∏ (–º–∞—Å—Å–∏–≤) - –Ω–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
    if (handleRichText && Array.isArray(fieldValue)) {
      console.log('üîç [Auto Slug] –û–±–Ω–∞—Ä—É–∂–µ–Ω Rich Text Blocks (–º–∞—Å—Å–∏–≤)');
      return this.extractTextFromBlocks(fieldValue);
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    if (typeof fieldValue === 'string') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ HTML —Ç–µ–≥–∏ (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Rich Text)
      if (handleRichText && fieldValue.includes('<') && fieldValue.includes('>')) {
        console.log('üîç [Auto Slug] –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Rich Text (HTML)');
        return this.extractTextFromHtml(fieldValue);
      }
      
      // –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
      console.log('üîç [Auto Slug] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞');
      return fieldValue;
    }

    console.log('‚ö†Ô∏è [Auto Slug] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–ª—è:', typeof fieldValue, fieldValue);
    return '';
  },

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ª–∞–≥
   * @param {string} text - –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
   * @param {string} contentType - —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   * @param {string} documentId - ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏)
   * @param {object} options - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ slugify
   * @returns {Promise<string>} - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ª–∞–≥
   */
  async generateUniqueSlug(text, contentType, documentId = null, options = {}) {
    if (!text) {
      console.log('‚ö†Ô∏è [Auto Slug] –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–≥–∞');
      return '';
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const config = settingsStore.getSettings();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–ª–∞–≥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const baseSlug = slugify(text, {
      ...config.slugifyOptions,
      ...options
    });

    console.log('üîÑ [Auto Slug] –ë–∞–∑–æ–≤—ã–π —Å–ª–∞–≥:', baseSlug);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    let slug = baseSlug;
    let counter = 1;

    while (true) {
      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ —Å —Ç–∞–∫–∏–º —Å–ª–∞–≥–æ–º
      const existing = await strapi.db.query(contentType).findOne({
        where: { 
          slug: slug,
          ...(documentId && { documentId: { $ne: documentId } })
        }
      });

      if (!existing) {
        console.log('‚úÖ [Auto Slug] –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ª–∞–≥ –Ω–∞–π–¥–µ–Ω:', slug);
        break;
      }

      slug = `${baseSlug}-${counter}`;
      counter++;
      console.log('üîÑ [Auto Slug] –ü–æ–ø—ã—Ç–∫–∞ —Å–ª–∞–≥–∞:', slug);
    }

    return slug;
  },

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–∞–≥ –¥–ª—è –∑–∞–ø–∏—Å–∏
   * @param {object} data - –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
   * @param {string} contentType - —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   * @param {string} documentId - ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
   * @returns {Promise<string|null>} - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–∞–≥ –∏–ª–∏ null
   */
  async generateSlugForEntry(data, contentType, documentId = null) {
    console.log(`üîç [Auto Slug] generateSlugForEntry –≤—ã–∑–≤–∞–Ω –¥–ª—è ${contentType}`);
    console.log(`üìã [Auto Slug] –î–∞–Ω–Ω—ã–µ:`, JSON.stringify(data, null, 2));
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const config = settingsStore.getSettings();
    console.log(`‚öôÔ∏è [Auto Slug] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:`, config);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –ø–ª–∞–≥–∏–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
    if (!config.enabled) {
      console.log(`‚ùå [Auto Slug] –ü–ª–∞–≥–∏–Ω –æ—Ç–∫–ª—é—á–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ`);
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ content-type
    const contentTypeConfig = config.contentTypes[contentType];
    if (contentTypeConfig && contentTypeConfig.enabled === false) {
      console.log(`‚ö†Ô∏è [Auto Slug] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è ${contentType}`);
      return null;
    }

    // –ï—Å–ª–∏ —Å–ª–∞–≥ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (data.slug && !config.updateExistingSlugs) {
      console.log(`‚ö†Ô∏è [Auto Slug] –°–ª–∞–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: "${data.slug}"`);
      return null;
    }
    
    if (data.slug && config.updateExistingSlugs) {
      console.log(`üîÑ [Auto Slug] –°–ª–∞–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º: "${data.slug}"`);
    }

    console.log(`üîç [Auto Slug] –ò—â–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ "${config.sourceField}":`, data[config.sourceField]);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—è
    let sourceText = this.extractTextFromField(
      data[config.sourceField], 
      config.handleRichText
    );

    console.log(`üìù [Auto Slug] –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—è:`, sourceText);

    // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ
    if (!sourceText && config.fallbackField) {
      console.log(`üîç [Auto Slug] –ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –ø–æ–ª–µ "${config.fallbackField}":`, data[config.fallbackField]);
      sourceText = this.extractTextFromField(
        data[config.fallbackField], 
        config.handleRichText
      );
      console.log(`üìù [Auto Slug] –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø–æ–ª—è:`, sourceText);
    }

    if (!sourceText) {
      console.log(`‚ö†Ô∏è [Auto Slug] –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–≥–∞ –≤ ${contentType}`);
      console.log(`üîç [Auto Slug] –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—è: ${config.sourceField}, ${config.fallbackField}`);
      return null;
    }

    console.log(`üöÄ [Auto Slug] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–∞–≥ –¥–ª—è ${contentType} –∏–∑ —Ç–µ–∫—Å—Ç–∞:`, sourceText);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ª–∞–≥
    const slug = await this.generateUniqueSlug(
      sourceText,
      contentType,
      documentId,
      config.slugifyOptions
    );

    console.log(`‚úÖ [Auto Slug] –ò—Ç–æ–≥–æ–≤—ã–π —Å–ª–∞–≥:`, slug);
    return slug;
  },

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ content-types –∏ –Ω–∞—Ö–æ–¥–∏—Ç —Ç–µ, –≥–¥–µ –µ—Å—Ç—å –ø–æ–ª–µ slug
   * @returns {Array} - —Å–ø–∏—Å–æ–∫ content-types —Å –ø–æ–ª–µ–º slug
   */
  getContentTypesWithSlug() {
    const contentTypes = strapi.contentTypes;
    const typesWithSlug = [];

    for (const [uid, contentType] of Object.entries(contentTypes)) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∏–ø—ã
      if (!uid.startsWith('api::')) continue;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ slug
      if (contentType.attributes && contentType.attributes.slug) {
        typesWithSlug.push({
          uid,
          displayName: contentType.info?.displayName || uid,
          hasSlugField: true,
          hasTitleField: !!contentType.attributes.title,
          hasNameField: !!contentType.attributes.name,
        });
      }
    }

    console.log('üìã [Auto Slug] –ù–∞–π–¥–µ–Ω–Ω—ã–µ content-types —Å –ø–æ–ª–µ–º slug:', typesWithSlug);
    return typesWithSlug;
  }
}); 