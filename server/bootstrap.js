'use strict';

const settingsStore = require('./utils/settings-store');

module.exports = ({ strapi }) => {
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º universal lifecycle —Ö—É–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ Strapi
  const registerSlugLifecycles = () => {
    console.log('üöÄ [Auto Slug Manager] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–ª–∞–≥–∏–Ω–∞ –∏–∑ Strapi
    const pluginConfig = strapi.config.get('plugin.auto-slug-manager') || {};
    console.log('‚öôÔ∏è [Auto Slug Manager] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞:', pluginConfig);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞
    settingsStore.initializeSettings(pluginConfig);
    
    const slugService = strapi.plugin('auto-slug-manager').service('slug-generator');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ content-types —Å –ø–æ–ª–µ–º slug
    const contentTypesWithSlug = slugService.getContentTypesWithSlug();
    
    if (contentTypesWithSlug.length === 0) {
      console.log('‚ö†Ô∏è [Auto Slug Manager] –ù–µ –Ω–∞–π–¥–µ–Ω–æ content-types —Å –ø–æ–ª–µ–º slug');
      return;
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º lifecycle —Ö—É–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ content-type
    contentTypesWithSlug.forEach(({ uid, displayName }) => {
      console.log(`üìù [Auto Slug Manager] –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º lifecycle –¥–ª—è ${displayName} (${uid})`);
      
      // –í Strapi v5 –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ strapi.db.lifecycles
      strapi.db.lifecycles.subscribe({
        models: [uid],
        
        // beforeCreate —Ö—É–∫
        async beforeCreate(event) {
          const { data } = event.params;
          console.log(`üÜï [Auto Slug Manager] beforeCreate –¥–ª—è ${uid}:`, data.title || data.name);
          
          if (!data.slug) {
            const slug = await slugService.generateSlugForEntry(data, uid);
            if (slug) {
              data.slug = slug;
              console.log(`‚úÖ [Auto Slug Manager] –°–ª–∞–≥ —Å–æ–∑–¥–∞–Ω: "${slug}"`);
            }
          }
        },

        // beforeUpdate —Ö—É–∫
        async beforeUpdate(event) {
          const { data, where } = event.params;
          console.log(`üîÑ [Auto Slug Manager] beforeUpdate –¥–ª—è ${uid}:`, data.title || data.name);
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–∞–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
          if (data.title || data.name) {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å
            const currentEntity = await strapi.db.query(uid).findOne({ where });
            
            // –ü—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–∞–≥ (—Å–µ—Ä–≤–∏—Å —Å–∞–º —Ä–µ—à–∏—Ç, –æ–±–Ω–æ–≤–ª—è—Ç—å –∏–ª–∏ –Ω–µ—Ç)
            const slug = await slugService.generateSlugForEntry(data, uid, currentEntity?.documentId);
            if (slug) {
              data.slug = slug;
              console.log(`‚úÖ [Auto Slug Manager] –°–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω: "${slug}"`);
            } else if (currentEntity?.slug) {
              console.log(`‚ö†Ô∏è [Auto Slug Manager] –°–ª–∞–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: "${currentEntity.slug}"`);
            }
          }
        }
      });
    });
    
    console.log(`‚úÖ [Auto Slug Manager] –ü–ª–∞–≥–∏–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${contentTypesWithSlug.length} content-types`);
  };

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Strapi
  registerSlugLifecycles();
}; 